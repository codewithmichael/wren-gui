#!/usr/bin/env python
#
# NAME
#
#   wren-gui
#
# DESCRIPTION
#
#   Main Wren GUI python application file. Kicks off an application to monitor
#   and maintain a Linux machine running on the Wren project platform.
#
#   Requires a running Wren platform environment.
#
# AUTHOR
#
#   Originally written by Michael Spencer.
#   Maintained by the Wren GUI project developers.
#
#
# The Wren GUI project; Copyright 2015 the Wren GUI project developers.
# See the COPYRIGHT file in the top-level directory of this distribution
# for individual attributions.
#
# This file is part of the Wren GUI project. It is subject to the license terms
# in the LICENSE file found in the top-level directory of this distribution.
# No part of the Wren GUI project, including this file, may be copied,
# modified, propagated, or distributed except according to the terms contained
# in the LICENSE file.
#
# This program comes with ABSOLUTELY NO WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# LICENSE file found in the top-level directory of this distribution for
# more details.
#

from gi.repository import Gtk, GObject
from lib.usage import MemoryUsage, DiskUsage
from lib.mainglade import MainGlade

# update interval (in seconds)
UPDATE_TIME = 2

class Main:

  def __init__(self):
    # instantiate main window
    main_glade = self.main_glade = MainGlade()
    # populate stats
    self.update_usage()
    # show window
    main_glade.window.show()
    # set timer to update stats on interval
    GObject.timeout_add_seconds(UPDATE_TIME, self.timeout_callback)

  def update_usage(self):
    # take system readings and display stats
    self.main_glade.set_usage(memory_usage=MemoryUsage(),
                              disk_usage=DiskUsage())

  def timeout_callback(self):
    # populate stats
    self.update_usage()
    # set timer for next iteration
    GObject.timeout_add_seconds(UPDATE_TIME, self.timeout_callback)
    

if __name__ == '__main__':
  
  # allow SIGINT from terminal
  import signal
  signal.signal(signal.SIGINT, signal.SIG_DFL)

  # require root permission
  import os, sys
  if os.geteuid() != 0:
    sys.exit('Root permission required... exiting.')

  # run
  main = Main()
  Gtk.main()
